/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BUS;

import DTO.ChitietHoaDon;
import java.io.FileOutputStream;
import java.util.Date;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.log.Logger;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.File;
import java.io.IOException;
import java.lang.System.Logger.Level;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;


public class Report{
    private static String FILE = "C:\\Users\\Nguyen\\Desktop\\hoadon.pdf";
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);

    public static void main(String[] args) {
        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();
            addMetaData(document);
//            addTitlePage(document,li);
//            addContent(document);
            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public void XuatFileHD(String name,ArrayList<ChitietHoaDon> list,String s){
      try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();
            addMetaData(document);
            addTitlePage(document,list,s);
//            addContent(document);
            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // iText allows to add metadata to the PDF which can be viewed in your Adobe
    // Reader
    // under File -> Properties
    private static void addMetaData(Document document) {
        document.addTitle("My first PDF");
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("Lars Vogel");
        document.addCreator("Lars Vogel");
    }

    private static void addTitlePage(Document document,ArrayList<ChitietHoaDon> list,String s)
        throws DocumentException {
        Paragraph preface = new Paragraph();
        Paragraph preface2 = new Paragraph();
        File fontFile=new File("C:\\Users\\Nguyen\\Documents\\NetBeansProjects\\Quan_Li_Cua_Hang_MayTinh\\src\\IMG\\vuArial.ttf");
        Font font=new Font();
        Font font1=new Font();
        try {
            BaseFont bf=BaseFont.createFont(fontFile.getAbsolutePath(),BaseFont.IDENTITY_H,BaseFont.EMBEDDED);
            font=new Font(bf,9);
            font1 =new Font(bf,18);
        } catch (DocumentException ex) {
        } catch (IOException ex) {
        }
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        Paragraph preface1 = new Paragraph("HÓA ĐƠN", font1);
        preface1.setAlignment(Element.ALIGN_CENTER);
//        preface.add(preface1);

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Họ tên khách hàng: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                font));
        addEmptyLine(preface, 3);
////        preface.add(new Paragraph(
////                "This document describes something which is very important ",
////                smallBold));
//
//        addEmptyLine(preface, 8);
//
////        preface.add(new Paragraph(
////                "This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
////                redFont));
        document.add(preface1);
        document.add(preface);
        PdfPTable table = new PdfPTable(5);

        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);
        
        
        PdfPCell c1 = new PdfPCell(new Phrase("Mã sản phẩm",font));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Tên sản phẩm",font));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Số Lượng",font));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        c1 = new PdfPCell(new Phrase("Đơn giá",font));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        c1 = new PdfPCell(new Phrase("Tổng tiền",font));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);
        int sum ;
        sum= 0;
        for (ChitietHoaDon x : list) {
            c1 = new PdfPCell(new Phrase(x.getMaSP()));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
             table.addCell(c1);
            c1 = new PdfPCell(new Phrase("ten sp",font));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
             table.addCell(c1);
            c1 = new PdfPCell(new Phrase(x.getSoluong()));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
             table.addCell(c1);
            c1 = new PdfPCell(new Phrase(x.getDongia()));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
             table.addCell(c1);
             sum+=Integer.parseInt(x.getTongtien());
            c1 = new PdfPCell(new Phrase(x.getTongtien()));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
             table.addCell(c1);
//             table.addCell("tên SP");
//             table.addCell(x.getSoluong());
//             table.addCell(x.getDongia());
//             table.addCell(x.getTongtien());
        }
        document.add(table);
         preface2.setAlignment(Element.ALIGN_RIGHT);
        addEmptyLine(preface2, 2);
        preface2.add(new Paragraph(
                "Tổng tiền: " + sum,font));
         addEmptyLine(preface2, 1);
//        preface2.add(new Paragraph(
//                "Tiền giảm giá: " + System.getProperty("user.name"),font));
//         addEmptyLine(preface2, 1);
//        preface2.add(new Paragraph(
//                "Thành tiền: " + System.getProperty("user.name"),font));
//         addEmptyLine(preface2, 1);
        document.add(preface2);
        // Start a new page
//        document.newPage();
    }

    private static void addContent(Document document) throws DocumentException {
        Anchor anchor = new Anchor("First Chapter", catFont);
        anchor.setName("First Chapter");

        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor), 1);
        
        Paragraph subPara = new Paragraph("Báo cáo chi tiết", subFont);
        Section subCatPart = catPart.addSection(subPara);
//        subCatPart.add(new Paragraph("Hello"));

//        subPara = new Paragraph("Bảng báo cáo chi tiết 1", subFont);
        subCatPart = catPart.addSection(subPara);
//        subCatPart.add(new Paragraph("Paragraph 1"));
//        subCatPart.add(new Paragraph("Paragraph 2"));
//        subCatPart.add(new Paragraph("Paragraph 3"));

        // add a list
//        createList(subCatPart);
//        Paragraph paragraph = new Paragraph();
//        addEmptyLine(paragraph, 5);
//        subCatPart.add(paragraph);
//
//        // add a table
        createTable(subCatPart);
//
//        // now add all this to the document
        document.add(catPart);
//
//        // Next section
//        anchor = new Anchor("Second Chapter", catFont);
//        anchor.setName("Second Chapter");
//
//        // Second parameter is the number of the chapter
//        catPart = new Chapter(new Paragraph(anchor), 1);
//
//        subPara = new Paragraph("Subcategory", subFont);
//        subCatPart = catPart.addSection(subPara);
//        subCatPart.add(new Paragraph("This is a very important message"));
//
//        // now add all this to the document
//        document.add(catPart);
//
    }

    private static void createTable(Section subCatPart)
            throws BadElementException {
        PdfPTable table = new PdfPTable(3);

        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);

        PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Table Header 2"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Table Header 3"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        
        table.setHeaderRows(1);

        table.addCell("1.0");
        table.addCell("1.1");
        table.addCell("1.2");
        table.addCell("2.1");
        table.addCell("2.2");
        table.addCell("2.3");

        subCatPart.add(table);

    }

    private static void createList(Section subCatPart) {
        List list = new List(true, false, 10);
        list.add(new ListItem("First point"));
        list.add(new ListItem("Second point"));
        list.add(new ListItem("Third point"));
        subCatPart.add(list);
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
    
}